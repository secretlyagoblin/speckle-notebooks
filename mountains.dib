#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!markdown

# Speckle Job Runner

#!markdown

## Initiate

#!markdown

### Speckle

#!csharp

#r "nuget: Speckle.Core"

using Speckle.Core;
using Speckle.Core.Api;
using Speckle.Core.Credentials;

#!csharp

//in case we want to do some stuff in parallel later
static Client GetClient(){    
    var account = Speckle.Core.Credentials.AccountManager.GetAccounts().First();
    var client = new Client(account);
    Speckle.Core.Logging.Setup.Init("2.13","Workbook");
    return client;
}

public var speckle = GetClient();

$"Logged into Speckle at url '{speckle.ServerUrl}' as '{speckle.Account.userInfo.name}' ({speckle.Account.userInfo.email})"

#!markdown

### Rhino

#!csharp

public var rhino = new System.Net.Http.HttpClient(){
    BaseAddress = new Uri("http://localhost:5000")
};

if(rhino.GetStringAsync("/").Result != "compute.rhino3d") throw new Exception();

$"Successfully connected to RhinoCompute at url '{rhino.BaseAddress}'"

#!csharp

#r "nuget: System.Net.Http.Json"

using System.Net.Http.Json;
using System.Text.Json;

public record ComputeJob(string StreamIn, string StreamOut, string Algo);

public void RunJobOnCompute(ComputeJob job)
{
    const string POINTER = null;

    var schema = new
    {
        absolutetolerance = 0.01,
        angletolerance = 1.0,
        modelunits = "Meters",
        algo = job.Algo,
        pointer = POINTER,
        cachesolve = false,
        recursionlevel = 0,
        values = new[] {
          new {
            ParamName = "SpeckleIn",
              InnerTree = new Dictionary < string, object[] > {
                {
                  "0",
                  new [] {
                    new {
                      type = "System.String",
                      data = $"\"{job.StreamIn}\""
                    },
                  }
                }
              }
          },
          new {
            ParamName = "SpeckleOut",
              InnerTree = new Dictionary < string, object[] > {
                {
                  "0",
                  new [] {
                    new {
                      type = "System.String",
                      data = $"\"{job.StreamOut}\""
                    }
                  }
                }
              }
          }
        },
        warnings = Array.Empty<object>(),
        errors = Array.Empty<object>()
    };

    var script = rhino.PostAsJsonAsync("/grasshopper", schema).Result.Content.ReadFromJsonAsync<JsonElement>().Result;

}

#!markdown

## Settings

#!markdown

### Config

#!csharp

public record Job(string name, string ghFileName);

public var config = new{
    root = "Root",
    stopwatch = System.DateTime.UtcNow,
    perRegionJobs = new List<Job>{    
        //new("Densify","scripts/densify.gh"),
        new("CoastMask","scripts/edge types.gh"),        
    }
};

#!markdown

#### Audit

#!markdown

## Jobs

#!markdown

### Configure Regions

#!csharp

//Iterate over Root
using Speckle.Core.Models;


static Base TryGetChild(this Base @base, string str){
    if(@base[str] is not Base child) return null;
    return child;
}

static string TryGetString(this Base @base, string str){
    if(@base[str] is not string outStr) return null;
    return outStr;
}


static IEnumerable<Base> TryGetGhList(this Base @base, string str){
    var child = @base.TryGetChild(str);
    var list = child?
    .GetMembers()
    .Where(x => x.Key.StartsWith(@"@{"))
    .FirstOrDefault();

    var baseList = (list?.Value as IEnumerable<object>)        
        .Select(x => x as Base);
    
    return baseList;
}

public var root = await speckle.StreamSearch(config.root).ContinueWith(x => x.Result.First().id);
var latest = await speckle.BranchGet(root,"Main").ContinueWith(x => x.Result.commits.items.First());

var @base = await Operations.Receive(latest.referencedObject);

public record Region(string Name, string Stream, string ObjectRef);

public var regions = @base.TryGetGhList("@Regions")?.Select(x => new Region(x.TryGetString("regionId"),root,x.id));

regions

#!markdown

### Run Region Job 1

#!csharp

public List<ShoreRegion> objs = new List<ShoreRegion>();

static IEnumerable<Base> TryGetList(this Base @base, string str){
    var child = @base[str];

    var baseList = (child as IEnumerable<object>)        
        .Select(x => x as Base);
    
    return baseList;
}

public record ShoreRegion(Region Region, string Name, string Id);

foreach(var r in regions)
{
        
        var branch = await speckle.BranchGet(root,$"{r.Name}/cliffmask");

        if(branch.commits is null) continue;
        if(branch.commits.items.Count == 0) continue;

        //objs.Add(branch.commits.items.First().);

        //continue;

        var @base = await Operations.Receive(branch.commits.items.First().referencedObject);

        var regions = @base
        .TryGetGhList("@data")
        .First()
        .TryGetList("@Cliffs")
        .Cast<Base>()
        .Select((obj,i) => new ShoreRegion(r,$"{r.Name}-{i}",obj.id));

        objs.AddRange(regions);
}

objs

#!csharp

var commits = new List<string>();

public var branches = new List<Branch>();

public record Log(string Message);

public var report = new List<Log>();

foreach(var shoreRegion in objs){

    var branchName = $"{shoreRegion.Region.Name}/refinedShore/{shoreRegion.Name}";

    var baseCall = $"{speckle.Account.serverInfo.url}/streams/{root}";
    

    var regionObjectPath = $"{baseCall}/objects/{shoreRegion.Id}";
    var outBranch = $"{baseCall}/branches/{branchName}";
    
    var jobPath = System.IO.Path.GetFullPath(config.perRegionJobs[0].ghFileName);

    var branch = await speckle.BranchGet(root,branchName).ContinueWith(x => x.Result is not null ? x.Result : null);

        if(branch is null){

            var branchCreateInput = new BranchCreateInput(){
                streamId = root,
                description = "Test",
                name = branchName
            };

            var res = await speckle.BranchCreate(branchCreateInput);
            branch = await speckle.BranchGet(root,branchName);

            report.Add(new($"Created branch {branch.name}"));
        }else{
            report.Add(new($"Found branch {branch.name}"));
        } 

    var ghScript = Convert.ToBase64String(System.IO.File.ReadAllBytes(jobPath));

    var job = new ComputeJob(regionObjectPath,outBranch,ghScript);
    
    RunJobOnCompute(job);   

    branch = await speckle.BranchGet(root,branchName,1);//.ContinueWith(x => x.Result.commits?.items[0].id ?? "");
    branches.Add(branch);
}

branches

#!csharp

public var commit =$"{speckle.Account.serverInfo.url}/streams/{root}/commits/{branches.First().commits.items.First().id}?overlay={string.Join(',',branches
    .Skip(1)
    .Where(x => x.commits.items.Count != 0)
    .Select(x => x.commits.items.First().id).ToList())}";

$"View the combined commit at '{commit}'"
